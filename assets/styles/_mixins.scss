////// REST ////// 

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}


/// COLORS ///

$black1: rgb(17,17,17);
$white1: rgb(243,243,243);
$color1:rgb(209,209,209);
$color2:rgb(233,233,233);
$color3: rgb(105,105,105);
$color4: rgb(50,20,105);

/* Mobile fonts size
-------------------------*/

$Body-text-default: 16px;
$Body-text-mobile: 14px;
///////////////////////
$text-headline-default: 40px;
$text-headline-mobile: 30px;


/* Flex Box
-------------------------*/

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-center-wrap {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
}

@mixin flex-space-evenly {
    display: flex;
    align-items: center;
}

@mixin flex-column {
    display: flex;
    flex-direction: column;
    align-items: center;
}

@mixin flex-column-end {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
}


@mixin flex-column-start {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}

/* Border Radius
-------------------------*/

@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box;  /* stops bg color from leaking outside the border: */
  }


@mixin border-top-radius($radius) {
    -webkit-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
    -webkit-border-top-left-radius: $radius;
     border-top-left-radius: $radius;
     background-clip: padding-box;
  }
@mixin border-right-radius($radius) {
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
    background-clip: padding-box;
  }
@mixin border-bottom-radius($radius) {
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
    background-clip: padding-box;
  }
@mixin border-left-radius($radius) {
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
    -webkit-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
    background-clip: padding-box;
  }
   


/* Center Block
-------------------------*/

@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }

/* Circle  
-------------------------*/

@mixin circle($width: 50px, $height: 50px, $color: green) {
    width: $width;
    height: $height;
    border-radius: 50%;
    background: $color;
  }


/* Text  
-------------------------*/  

@mixin text($font-size,$color,$letter-spacing,$line-hight) {
   font-size: $font-size;
   color: $color;
   letter-spacing: $letter-spacing;
   line-height: $line-hight;
}

@mixin simple-text($font-size,$color) {
  font-size: $font-size;
  color: $color;
}




/* BreakPoints  
-------------------------*/  

$breakpoints:(
  "ex-small": ( max-width: 600px ),
  "small": ( min-width:   600px ),
  "medium": ( min-width:  992px ),
  'large': ( min-width: 1200px )
) !default;

@mixin respond-to($breakpoint) {
  // @if($breakpoint == "ex-small"){
  //   @media (max-width: map-get($breakpoints, $breakpoint)) {
  //     @content;
  //   }
  // }
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    //   @media (min-width: map-get($breakpoints, $breakpoint)) {
    //     @content;
    //   }
    // }
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}